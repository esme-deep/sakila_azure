{
	"name": "DwhFlowFact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "StagingRental",
						"type": "DatasetReference"
					},
					"name": "sourceStagingRental"
				},
				{
					"dataset": {
						"referenceName": "fact_rental",
						"type": "DatasetReference"
					},
					"name": "factRental"
				},
				{
					"dataset": {
						"referenceName": "FilmDim",
						"type": "DatasetReference"
					},
					"name": "DIMFILM"
				},
				{
					"dataset": {
						"referenceName": "StagingInventory",
						"type": "DatasetReference"
					},
					"name": "inventoryStaging"
				},
				{
					"dataset": {
						"referenceName": "CustomerDIM",
						"type": "DatasetReference"
					},
					"name": "DimCunstomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fact_rental",
						"type": "DatasetReference"
					},
					"name": "rentalfact"
				}
			],
			"transformations": [
				{
					"name": "joinInvetory"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filmchecked"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          rental_id as integer,",
				"          rental_date as date,",
				"          inventory_id as integer,",
				"          customer_id as integer,",
				"          return_date as date,",
				"          staff_id as integer,",
				"          last_update as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceStagingRental",
				"source(output(",
				"          row_id as integer,",
				"          BK_inventory as integer,",
				"          BK_rental as integer,",
				"          BK_payment as integer,",
				"          total_payment as decimal(15,2),",
				"          SK_customer as integer,",
				"          SK_film as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> factRental",
				"source(output(",
				"          SK_film as integer,",
				"          BK_film as integer,",
				"          title as string,",
				"          length_min as integer,",
				"          language as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DIMFILM",
				"source(output(",
				"          inventory_id as integer,",
				"          film_id as integer,",
				"          store_id as integer,",
				"          last_update as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> inventoryStaging",
				"source(output(",
				"          SK_customer as integer,",
				"          BK_customer as integer,",
				"          email as string,",
				"          country as string,",
				"          city as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimCunstomer",
				"sourceStagingRental, inventoryStaging join(sourceStagingRental@inventory_id == inventoryStaging@inventory_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinInvetory",
				"lookup3 select(mapColumn(",
				"          rental_id,",
				"          film_id = select3@film_id,",
				"          inventory_id = select3@inventory_id,",
				"          customer_id,",
				"          last_update = select3@last_update",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, DIMFILM lookup(film_id == BK_film,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     desc(BK_film, false),",
				"     broadcast: 'auto')~> lookup1",
				"select2, DIMFILM join(select2@SK_film == DIMFILM@SK_film,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"lookup1 select(mapColumn(",
				"          rental_id,",
				"          inventory_id,",
				"          customer_id,",
				"          last_update,",
				"          film_id,",
				"          SK_film,",
				"          BK_film,",
				"          title,",
				"          length_min,",
				"          language",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join1 select(mapColumn(",
				"          rental_id,",
				"          inventory_id,",
				"          customer_id,",
				"          last_update,",
				"          film_id,",
				"          SK_film = DIMFILM@SK_film,",
				"          BK_film = DIMFILM@BK_film,",
				"          title = DIMFILM@title,",
				"          length_min = DIMFILM@length_min,",
				"          language = DIMFILM@language",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> filmchecked",
				"filmchecked, DimCunstomer lookup(customer_id == BK_customer,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     desc(BK_customer, false),",
				"     broadcast: 'auto')~> lookup2",
				"select3, inventoryStaging lookup(select3@inventory_id == inventoryStaging@inventory_id,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     desc(inventoryStaging@inventory_id, false),",
				"     broadcast: 'auto')~> lookup3",
				"joinInvetory select(mapColumn(",
				"          rental_id,",
				"          rental_date,",
				"          inventory_id = sourceStagingRental@inventory_id,",
				"          customer_id,",
				"          last_update = sourceStagingRental@last_update,",
				"          film_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"lookup2 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          row_id as integer,",
				"          BK_inventory as integer,",
				"          BK_rental as integer,",
				"          BK_payment as integer,",
				"          total_payment as decimal(15,2),",
				"          SK_customer as integer,",
				"          SK_film as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BK_inventory = inventory_id,",
				"          BK_rental = rental_id,",
				"          SK_customer,",
				"          SK_film",
				"     )) ~> rentalfact"
			]
		}
	}
}